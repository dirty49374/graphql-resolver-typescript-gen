import { Context } from "../context";
import { declare_enum_type } from "./enums";
import { declare_scalar_type } from "./scalars";
import { codetpl, MAP } from "../lib/codetpl";
import { declare_union_type } from "./unions";
import { declare_resolver_type, declare_all_resolvers_type } from "./resolvers";
import { declare_object_type } from './objects';
import { declare_interface_type } from './interfaces';
import { declare_inputObject_type } from './inputObjects';

export const imports_codes = (ctx: Context) =>
  codetpl`

    import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';

    `;

export const resolver_codes = (ctx: Context) =>
  codetpl`
    // this file is generated by code generator

    // scalar types -----------------------------
    ${declare_scalar_type(ctx, ctx.scalars)}

    // union types ------------------------------
    ${MAP(ctx.unionNodes, v => declare_union_type(ctx, v))}

    // enum types -------------------------------
    ${MAP(ctx.enumNodes, v => declare_enum_type(ctx, v))}

    // object types -----------------------------
    ${MAP(ctx.objectNodes, v => declare_object_type(ctx, v))}

    // interface types --------------------------
    ${MAP(ctx.interfaceNodes, v => declare_interface_type(ctx, v))}

    // input types ------------------------------
    ${MAP(ctx.inputObjectNodes, v => declare_inputObject_type(ctx, v))}

    // resolver types ---------------------------
    ${MAP(ctx.objectNodes, v => declare_resolver_type(ctx, v))}

    // all resolvers ----------------------------
    ${declare_all_resolvers_type(ctx)}
    `;
